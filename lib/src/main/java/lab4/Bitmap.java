/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab4;


import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class Bitmap {


  String input;
  String output;
  String newName;

  BufferedImage img = null;


    public Bitmap(String input, String output, String newName) throws IOException{
        this.input = input;
        this.output = output;
        this.newName = newName;
       //this  method  used to reading images .
        try{
            this.img = ImageIO.read(new File(input));
        }catch (IOException exception){
            System.out.println(exception);
        }
    }
//    this method used to write imges after edits.
    public void writeImage(BufferedImage imgAfterEdit) throws IOException{
        try{
            File output = new File(this.output + "/" + newName + ".bmp");
            System.out.println(output);
            ImageIO.write(imgAfterEdit,"bmp",output);
        } catch (IOException exception){
            System.out.println(exception);
        }
    }

//     this method is use to remove any Blue colors..
    public void filterBlue() throws IOException {
        Color currentColor , color ;
        BufferedImage img = ImageIO.read(new File(input));
        for (int i = 0; i < img.getHeight(); i++) {
            for (int j = 0; j < img.getWidth(); j++) {
                currentColor = new Color(img.getRGB(j,i));
                color = new Color(currentColor.getRed() , currentColor.getGreen() , 0);
                img.setRGB(j , i ,color.getRGB());
            }

        }
        this.writeImage(img);

    }

//     this method is use to remove any Green colors..

    public void filterGreen() throws IOException {
        Color currentColor , color ;
        BufferedImage img = ImageIO.read(new File(input));
        for (int i = 0; i < img.getHeight(); i++) {
            for (int j = 0; j < img.getWidth(); j++) {
                currentColor = new Color(img.getRGB(j,i));
                color = new Color(currentColor.getRed() , 0 , currentColor.getBlue());
                img.setRGB(j , i ,color.getRGB());
            }

        }
        this.writeImage(img);

    }


    public void filpVertical() throws IOException {

        for (int i = 0; i < this.img.getWidth(); i++) {
            for (int j = 0; j < this.img.getHeight() / 2; j++) {
                int temp = this.img.getRGB(i, j);
                this.img.setRGB(i, j, this.img.getRGB(i, this.img.getHeight() - j - 1));
                this.img.setRGB(i, this.img.getHeight() - j - 1, temp);
            }
        }
        this.writeImage(img);
    }


}
